/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50724
Source Host           : localhost:3306
Source Database       : jt_helper

Target Server Type    : MYSQL
Target Server Version : 50724
File Encoding         : 65001

Date: 2023-04-13 22:43:56
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for tb_brain
-- ----------------------------
DROP TABLE IF EXISTS `tb_brain`;
CREATE TABLE `tb_brain` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `username` varchar(44) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=122 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tb_brain
-- ----------------------------
INSERT INTO `tb_brain` VALUES ('7', 'nacos注册中心', '<p>1 父工程引入父依赖\nxml</p>\n<p><dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n    <version>2.2.6.RELEASE</version>\n    <type>pom</type>\n    <scope>import</scope>\n</dependency>\n2 子工程引入子依赖\nxml</p>\n<p><dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n3 配置nacos地址\n在application.yml中添加nacos地址：\nyaml\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:8848</p>\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('8', 'vue中使用axios配置', '```\n在main.js中\n1.导包\nimport axios from &#39;axios&#39;\n2.配置请求根路径\naxios.defaults.baseURL=&#39;<a href=\"http://127.0.0.1:8888/api/private/v1/\">http://127.0.0.1:8888/api/private/v1/</a>&#39;\n3.配置访问路径(可以通过$http发起请求)\nVue.prototype.$http=axios\n在组件(Login中)\nforExampel:\nthis.$http.post(&quot;login&quot;,this.formData);\n\n```\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('9', 'vue中使用element-ui组件', '1.在element.js中导入组件,并使用\n```\nimport Vue from \'vue\'\n//导入\nimport { Button } from \'element-ui\'\nimport { Form,FormItem,Input,Message } from \'element-ui\'\n//使用\nVue.use(Button)\nVue.use(Form)\nVue.use(FormItem)\nVue.use(Input)\n//消息组件需要挂载到全局配置\nVue.prototype.$message=Message\n```\n\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('11', 'vue中的页面跳转', 'this.$router.push(\"/home\")', 'juntian');
INSERT INTO `tb_brain` VALUES ('12', '路由导航守卫实现登录退出', '```\n在router.js中\n//2.挂载路由导航守卫\nrouter.beforeEach((to, from, next) => {\n  //to 将要访问量的路劲\n  //from 代表从哪个路劲跳转而来\n  //next 是一个函数,表示放行\n  if (to.path === \'/login\') return next();\n  const tokenStr = window.sessionStorage.getItem(\"token\");\n  if (!tokenStr) return next(\'/login\');\n  next();\n})\n\n//1.对外暴露router\nexport default router\n\n登录和退出功能:\n登录:login.vue\nthis.$message.success(\"登录成功\");\nwindow.sessionStorage.setItem(\"token\",resp.data.data.token);\nthis.$router.push(\"/home\");\n退出:home.vue\n//清除token\nwindow.sessionStorage.clear();\n//转跳登录\nthis.$router.push(\"/login\");\n```\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('13', 'eslint和vscode格式化冲突的prettier插件配置', '1.项目根目录创建文件\n```\n.prettierrc\n```\n2.添加\n```\n{\n// 额外分号取消\n  \"semi\": false,\n  // 格式化时启用单引号\n  \"singleQuote\": true\n}\n```\n3.更改默认格式化格式为prettier\n\n4.解决 eslint要求函数括号前必须有空格的警告\n\n```\n\'space-before-function-paren\': 0 \n```\n\n5 解决eslint提示只能缩进2空格的警告\n```\n\"editor.detectIndentation\": false\n```\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('16', 'css-flex 填充 布局', '```\n//开启容器布局\n  display: flex;\n//左侧填充设置为空\n  padding-left: 0;\n//容器布局中的容器项,居中\n  align-items: center;\n//横轴上尾部对齐\n  justify-content: flex-end;\n//两侧贴边对齐\n  justify-content: space-between;\n//加填充物,第一个加上下填充,第二个左右加填充\n  padding: 0 20px;\n//设置表单格式为盒子\n  box-sizing: border-box;\n\nposition: absolute;\n//底部对齐\n  bottom: 0;\n//宽度百分百\n  width: 100%;\n\n\n.avatar_box {\n  width: 130px;\n  height: 130px;\n  //设置边框和颜色\n  border: 1px solid #eee;\n  //设置边框线\n  border-radius: 50%;\n  //填充物\n  padding: 10px;\n  box-shadow: 0 0 10px #ddd;\n  //设置图片标签\n  position: absolute;\n  left: 50%;\n  // 减去自身一半的距离,就是正中央\n  //第一个参数:横向-50%\n  //第二个参数:纵向-50%\n  transform: translate(-50%, -50%);\n  //加背景\n  background-color: rgb(255, 255, 255);\n\n  img {\n    width: 100%;\n    height: 100%;\n    //设置圆边框,并设半径\n    border-radius: 50%;\n    background-color: #eee;\n  }\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('77', 'linux网络连不起', '#### NetworkManager管理\n```\nsystemctl status NetworkManager			查看运行状态\nsystemctl start NetworkManager			启动\nsystemctl restart NetworkManager			重启\nsystemctl stop NetworkManager			关闭\nsystemctl is-enabled NetworkManager		查看是否开机启动\nsystemctl enable NetworkManager			开机启动\nsystemctl disable NetworkManager		禁止开机启动\nnmcli d                                 查看状态\n```\n第一次问题:linux无法联网\n\n1.windows中开启VMware的服务\n\n2.查看状态后没有启动networkManger,重启后问题解决\n\n\n\n\n\n\n\n\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('78', 'docker', '#### 1 卸载:\n```\nyum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine \\\n                  docker-ce\n```\n\n#### 2 安装docker\n虚拟机联网，安装yum工具\n\n```sh\nyum install -y yum-utils \\\n           device-mapper-persistent-data \\\n           lvm2 --skip-broken\n```\n然后更新本地镜像源：\n\n```shell\n# 设置docker镜像源\nyum-config-manager \\\n    --add-repo \\\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n    \nsed -i \'s/download.docker.com/mirrors.aliyun.com\\/docker-ce/g\' /etc/yum.repos.d/docker-ce.repo\nyum makecache fast\n```\n#### 3 启动\n\n启动docker前，一定要关闭防火墙后！！\n```sh\n#关闭\nsystemctl stop firewalld\n# 禁止开机启动防火墙\nsystemctl disable firewalld\n```\n\n\n```sh\nsystemctl status docker      #查看docker状态\n \nsystemctl enable docker         #开机启动：\nsystemctl start docker  # 启动docker服务\n\nsystemctl stop docker  # 停止docker服务\n\nsystemctl restart docker  # 重启docker服务\n```\n修改文件权限：\n\n```sh\n# 修改权限\nchmod +x /usr/local/bin/docker-compose\n```\n#### 配置docker仓库\n官方网站上有各种环境下的 [安装指南](https://docs.docker.com/install/)，这里主要介绍 Docker CE 在 CentOS上的安装。\n\n\n\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('79', 'docker问题', '已被锁定，PID\n```\nrm -f /var/run/yum.pid\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('80', 'docker镜像操作', '### 镜像\n[DockerHub](https://hub.docker.com/)\n\n拉取镜像\n```sh\ndocker pull nginx\n```\n查看拉取到的镜像\n```sh\ndocker images\n```\n导出镜像到磁盘\n```sh\ndocker save -o [保存的目标文件名称] [镜像名称]\ndocker save -o nginx.tar nginx:latest\n```\n删除本地nginx镜像\n```sh\ndocker rmi nginx:latest\n```\n加载本地镜像文件\n```sh\ndocker load -i nginx.tar\n```\n\n### 容器\n- docker run：创建并运行一个容器，处于运行状态\n- docker pause：让一个运行的容器暂停\n- docker unpause：让一个容器从暂停状态恢复运行\n- docker stop：停止一个运行的容器\n- docker start：让一个停止的容器再次运行\n- docker rm：删除一个容器\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('81', 'linux文件操作', '### 删除文件\n单个删除\n```\n\n```\n```\nrm -f  文件名\n```\n\n\n批量删除\n```\nrm -f + *文件关键字* \n```\n### 创建文件\n```\nmkdir 文件夹名\n```\n### 删除文件\n```\nrm -f /var/log/httpd/access.log\n```\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('82', 'springMvc错误', '返回字符串而不是页面\n```java\n@restController=@ResponeBody+@Controller\n所以\n改用@Controller\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('84', '云服务器', '#### CentOs7.6\n```\n公网ip:119.91.239.213\n用户名:root\n密码:123qwe...\n```\n#### Windows Server\n```\n公网ip:43.136.81.236\n用户名:root\n密码:1234qwer....\n```\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('85', 'Linux安装MySQL', '1. 新建文件夹/opt/mysql，并cd进去\n2. 运行下载mysql安装包\n```\nwget http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar\n```\n**PS：centos7.6自带的类mysql数据库是mariadb，会跟mysql冲突，要先删除。**\n\n3. 运行\n```\ntar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar \n```\n\n4. 运行查询mariadb相关安装包\n```\nrpm -qa|grep mari\n```\n \n5. 运行卸载\n```\nrpm -e --nodeps mariadb-libs\n```\n6. 然后开始真正安装mysql，依次运行以下几条\n```\nrpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm\nrpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm\nrpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm\nrpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm\n```\n7. 运行启动mysql\n```\nsystemctl start mysqld.service\n```\n8. 然后开始设置root用户密码\nMysql自动给root用户设置随机密码，运行可看到当前密码\n```\ngrep \"password\" /var/log/mysqld.log\n```\n9. 运行用root用户登录，提示输入密码可用上述的，可以成功登陆进入mysql命令行\n```\nmysql -u root  -p\n```\n\n10. 设置root密码，对于个人开发环境，如果要设比较简单的密码（生产环境服务器要设复杂密码），可以运行\n```\nset global validate_password_policy=0;\n```\n 提示密码设置策略\n（validate_password_policy默认值1，）\n \n11.  \n```\nset password for \'root\'@\'localhost\' =password(\'1234\');\n```\n\n12. ```\nSET PASSWORD FOR root@localhost = \'123qwe…\';\n``` \n13. 运行使密码设置生效\n```\nflush privileges\n```\n\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('86', 'linux端口操作', '查询端口占用\n```\nnetstat -aon|findstr \"8085\"\n```\n杀死进程\n```\nkill -9 pid\n```\n端口占用:\n\n```java\n查询端口:   netstat -aon|findstr \"8085\"\n查询应用:   tasklist|findstr \"9976\"\n杀死应用:   taskkill /f /t /im java.exe\nId应用:   taskkill /pid /20260\n```\nLinux查询端口\n```\nnetstat -tnlp | grep :8085\n```\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('87', 'xshell连接云服务器', '1.安装xshell6\n\n修改安装根目录下的\\nslicense.dll文件,用sublme打开\n\n- 搜索\n\n```\n7F0C 81F9 8033 E101\n```\n- 将下一个参数改为\n\n```\n0f83\n```\n就可以打开\n\n新建会话,输入主机名,公网ip\n\n```\n输入公网ip\n```\n\n选择用户身份验证:\n\n```\n输入账号密码\n```\n\n点击链接', 'juntian');
INSERT INTO `tb_brain` VALUES ('88', 'maven爆红', '1. pom红maven不红:maven仓库的问题,查看jar大小是否正常\n2. pom不红maven红:\n   - 依赖没下载问题,删除pom中这个依赖刷新重新引入,下载依赖\n   - 版本问题,更换版本号,重新下载依赖\n3. 类爆红,点进去不红:刷新缓存\n4. 遇到已经按网上搜索并解决的问题,不妨Build->Rebuild Project', 'juntian');
INSERT INTO `tb_brain` VALUES ('89', 'nodejs+vue', '下载saas\n```\ncnpm install node-sass\n```\nnode_modle重构\n```\nnpm cache clear --force\n```\n移除\n```\nnpm rm node-sass\n```\n装低版本(成功)\n```\ncnpm i sass-loader@6.x --save-dev\n\ncnpm i node-sass --save-dev\n```\n启动\n```\ncnpm install \ncnpm install mockjs\nnpm run dev\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('90', 'springboot代码自动生成器', '导入坐标\n```\n        <!--mysql-->\n        <dependency>\n            <groupId>com.mysql</groupId>\n            <artifactId>mysql-connector-j</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <!--代码生成器-->\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-generator</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n        <!--velocity-->\n        <dependency>\n            <groupId>org.apache.velocity</groupId>\n            <artifactId>velocity-engine-core</artifactId>\n            <version>2.0</version>\n        </dependency>\n```\n自动生成类,application同级目录\n```\npublic class CodeGenerator {\n    public static void main(String[] args) {\n        //1.获取代码生成器的对象\n        AutoGenerator autoGenerator = new AutoGenerator();\n\n        //设置数据库相关配置\n        DataSourceConfig dataSource = new DataSourceConfig();\n        dataSource.setDriverName(\"com.mysql.jdbc.Driver\");\n        dataSource.setUrl(\"jdbc:mysql://localhost:3306/ihrm?useSSL=false\");\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"1234\");\n        autoGenerator.setDataSource(dataSource);\n\n        //设置全局配置\n        GlobalConfig globalConfig = new GlobalConfig();\n        globalConfig.setOutputDir(System.getProperty(\"user.dir\")+\"/src/main/java\");    //设置代码生成位置\n        globalConfig.setOpen(false);    //设置生成完毕后是否打开生成代码所在的目录\n        globalConfig.setAuthor(\"JunTian\");    //设置作者\n        globalConfig.setFileOverride(true);     //设置是否覆盖原始生成的文件\n        globalConfig.setMapperName(\"%sMapper\");    //设置数据层接口名，%s为占位符，指代模块名称\n        globalConfig.setIdType(IdType.ASSIGN_ID);   //设置Id生成策略\n        autoGenerator.setGlobalConfig(globalConfig);\n\n        //设置包名相关配置\n        PackageConfig packageInfo = new PackageConfig();\n        packageInfo.setParent(\"com.asphyxia\");   //设置生成的包名，与代码所在位置不冲突，二者叠加组成完整路径\n        packageInfo.setEntity(\"pojo\");    //设置实体类包名\n        packageInfo.setMapper(\"mapper\");   //设置数据层包名\n        autoGenerator.setPackageInfo(packageInfo);\n\n        //策略设置\n        StrategyConfig strategyConfig = new StrategyConfig();\n        strategyConfig.setInclude(\"co_company\");  //设置当前参与生成的表名，参数为可变参数\n        strategyConfig.setTablePrefix(\"co_\");  //设置数据库表的前缀名称，模块名 = 数据库表名 - 前缀名  例如： User = tbl_user - tbl_\n        strategyConfig.setRestControllerStyle(true);    //设置是否启用Rest风格\n//        strategyConfig.setVersionFieldName(\"version\");  //设置乐观锁字段名\n//        strategyConfig.setLogicDeleteFieldName(\"deleted\");  //设置逻辑删除字段名\n//        strategyConfig.setEntityLombokModel(true);  //设置是否启用lombok\n\n        autoGenerator.setStrategy(strategyConfig);\n\n\n        //2.执行生成操作\n        autoGenerator.execute();\n    }\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('92', '清除maven仓库未下载全的jar包', '```\nset REPOSITORY_PATH=D:\\maven\\mvn_resp\nrem 正在搜索...\nfor /f \"delims=\" %%i in (\'dir /b /s \"%REPOSITORY_PATH%\\*lastUpdated\"\') do (\n    del /s /q %%i\n)\nrem 搜索完毕\npause\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('97', 'springboot日志', '```\nlogging:\n  level:\n    com.asphyxia: debug\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('98', 'mybatis-plus', '```\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('99', 'cmd命令提示符', '删除\n```\nrd\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('100', 'token登录代码实现', '\n\n JJWT\n\n1. 引入依赖\n\n   ```xml\n   <dependency>\n       <groupId>io.jsonwebtoken</groupId>\n       <artifactId>jjwt</artifactId>\n       <version>0.6.0</version>\n   </dependency>\n   ```\n\n2. 生成一个token测试一下\n\n   ```java\n   public class CreateJwtTest {\n       public static void main(String[] args) {\n           JwtBuilder jwtBuilder = Jwts.builder().setId(\"8156\").setSubject(\"JunTian\")\n                   .setIssuedAt(new Date())\n                   .signWith(SignatureAlgorithm.HS384, \"asphyxia_juntian\")\n                   .claim(\"companyId\",\"91520328214951477R\")\n                   .claim(\"companyName\",\"贵州茅贡米业有限公司\");\n           String token = jwtBuilder.compact();\n           System.out.println(token);\n       }\n   }\n   \n   ```\n\n3. 解析一个token\n\n   ```java\n   public class ParseJwtTest {\n   \n       /**\n        * 解析jwtToken字符串\n        * @param args\n        */\n       public static void main(String[] args) {\n           String token =\n                   \"eyJhbGciOiJIUzM4NCJ9.eyJqdGkiOiI4MTU2Iiwic3ViIjoiSnVuVGlhbiIsImlhdCI6MTY4MDQxNzU0OCwiY29tcGFueUlkIjoiOTE1MjAzMjgyMTQ5NTE0NzdSIiwiY29tcGFueU5hbWUiOiLotLXlt57ojIXotKHnsbPkuJrmnInpmZDlhazlj7gifQ.pRjGb7RQHsnkv2kFI0xpn0fYhsxi9d8duWMkTTdL-L8llj5CQL6Yv5mdrdvGYMh-\";\n           Claims claims = Jwts.parser().setSigningKey(\"asphyxia_juntian\").parseClaimsJws(token).getBody();\n   \n           //私有数据存放在claims对象中\n           System.out.println(claims.getId());\n           System.out.println(claims.getSubject());\n           System.out.println(claims.getIssuedAt());\n   \n           //解析自定义claim的内容\n           String companyId = (String) claims.get(\"companyId\");\n           String companyName = (String) claims.get(\"companyName\");\n   \n           System.out.println(companyId + \"    -----   \" + companyName);\n   \n       }\n   }\n   ```\n\n   \n\n4. \n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('101', 'router路由规则', '1.引入组件\n```\nimport HomeView from \'../views/HomeView.vue\'\n```\n2.添加规则\n```\n{\n    path: \'/\',\n    name: \'home\',\n    component: HomeView\n  }\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('102', 'Vue开始学习', '\n1. 创建Vue\n\n   1. 选择路由和配置文件,其他默认创建\n   2. 添加element组件\n   3. 添加axios依赖\n\n2. 入口:main.js\n\n   1. 导入了vue\n   2. 导入了app.vue这个根组件\n   3. 导入了路由和element-ui组件\n   4. new了一个vue的实例,通过render函数将App根组件渲染到了页面上,同时将路由也挂载给了实例对象app\n\n3. 首页app.vue\n\n   1. 删除不要的组件,留下需要的\n\n      ```vue\n      <template>\n        <div id=\"app\">App 根组件</div>\n      </template>\n      <script>\n      export default {\n        name: \'app\'\n      }\n      </script>\n      <style></style>\n      ```\n\n   2. 清理路由规则,删除不需要的路由规则\n\n      ```vue\n      import Vue from \'vue\'\n      import VueRouter from \'vue-router\'\n      \n      Vue.use(VueRouter)\n      \n      const routes = []\n      \n      const router = new VueRouter({\n        routes\n      })\n      \n      export default router\n      \n      ```\n\n      \n\n   3. 删除不要的views文件,因为没有使用\n\n   4. 删除components中的helloworld页面,因为没有使用这个组件\n\n   5. 在整个项目中我们只使用了app.vue这个根组件\n\n   6. 干净的项目结构开始开发\n\n1. 在app.vue中\n\n   ```\n   <!-- 路由占位符 -->\n     <router-view></router-view>\n   ```\n\n   这样,通过路由规则渲染的页面都会渲染到app.vue根组件中去\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('103', 'mybatis-plus忽略一个属性', '```\n@TableField(exist = false)\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('104', 'mybatis-plus分页错误/分页查询', '添加\n```\n@Configuration\npublic class MyBatisPlusConfig {\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));\n        return interceptor;\n    }\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('105', 'lombok', 'maven坐标\n```\n    <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.20</version>\n    </dependency>\n```\n日志\n```\n@slf4j\nlog.info\n```\n\n@data没有tostring\n```\n@Data包含了@ToString、@EqualsAndHashCode、@Getter / @Setter和@RequiredArgsConstructor的功能。\n```\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('106', '遍历map', '```\nfor (String key : map.keySet()) {\n            System.out.println(\"key= \"+ key + \" and value= \" + map.get(key));\n        }\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('107', '遍历list', '```\nSystem.out.println(\"增强for\");\n    for (int i : list) {\n        System.out.println(i);\n    }\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('108', 'mybatis-plus开启驼峰命名-表中下划线,实体驼峰', '```\nmybatis-plus:\n  configuration:\n    #在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射\n    map-underscore-to-camel-case: true\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('109', '解决springboot资源resource路径无法/访问tomcat资源拦截filter', '```\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurationSupport {\n    @Override\n    protected void addResourceHandlers(ResourceHandlerRegistry registry) {\n        /**\n         *拦截/backend/**路径\n         * 然后映射到classpath:/backend/资源路径下的backend\n         */\n        registry.addResourceHandler(\"/backend/**\").addResourceLocations(\"classpath:/backend/\");\n        registry.addResourceHandler(\"/front/**\").addResourceLocations(\"classpath:/front/\");\n    }\n\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('110', 'springbootFilter拦截器实现登录功能', '```\nimport com.alibaba.fastjson.JSON;\nimport com.asphyxia.controller.result.R;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.util.AntPathMatcher;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n\n@WebFilter(filterName = \"LoginCheckFilter\", urlPatterns = \"/*\")\n@Slf4j\npublic class LoginCheckFilter implements Filter {\n    public static final AntPathMatcher PATH_MATCHER = new AntPathMatcher();\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n        String requestURI = request.getRequestURI();\n\n        log.info(\"拦截到请求：{}\", requestURI);\n\n        String[] urls = new String[]{\n                \"/employee/login\",\n                \"/employee/logout\",\n                \"/backend/**\",\n                \"front/**\"\n        };\n\n        //判断请求是否需要处理\n        boolean check = check(urls, requestURI);\n\n        //不需要则放行\n        if (check) {\n            log.info(\"本次请求{}不需要处理\", requestURI);\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        //已登录则放行\n        if (request.getSession().getAttribute(\"employee\") != null) {\n            log.info(\"用户已登录，用户id为：{}\",request.getSession().getAttribute(\"employee\"));\n            filterChain.doFilter(request,response);\n            return;\n        }\n\n        //未登录,返回未登录结果\n        log.info(\"用户未登录\");\n        response.getWriter().write(JSON.toJSONString(R.error(\"NOTLOGIN\")));\n    }\n\n\n    private boolean check(String[] urls, String requestURI) {\n        for (String url : urls) {\n            boolean match = PATH_MATCHER.match(url, requestURI);\n            if (match) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('111', '扩展消息转换器/扩展自定义对象转换器', '配置类\n```\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurationSupport {\n   \n   @Override\n    protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n        log.info(\"扩展消息转换器...\");\n        //创建消息转换器对象\n        MappingJackson2HttpMessageConverter messageConverter = new MappingJackson2HttpMessageConverter();\n        //设置对象转换器，底层使用Jackson将Java对象转为json\n        messageConverter.setObjectMapper(new JacksonObjectMapper());\n        //将上面的消息转换器对象追加到mvc框架的转换器集合中\n        converters.add(0,messageConverter);\n    }\n}\n```\n转换类\n```\npackage com.asphyxia.common;\n\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\nimport com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\nimport com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;\nimport com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;\nimport com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;\nimport com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;\nimport com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;\nimport com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;\nimport java.math.BigInteger;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;\n\n/**\n * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象\n * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]\n * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]\n */\npublic class JacksonObjectMapper extends ObjectMapper {\n\n    public static final String DEFAULT_DATE_FORMAT = \"yyyy-MM-dd\";\n    public static final String DEFAULT_DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n    public static final String DEFAULT_TIME_FORMAT = \"HH:mm:ss\";\n\n    public JacksonObjectMapper() {\n        super();\n        //收到未知属性时不报异常\n        this.configure(FAIL_ON_UNKNOWN_PROPERTIES, false);\n\n        //反序列化时，属性不存在的兼容处理\n        this.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n\n\n        SimpleModule simpleModule = new SimpleModule()\n                .addDeserializer(LocalDateTime.class, new LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))\n                .addDeserializer(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))\n                .addDeserializer(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))\n\n                .addSerializer(BigInteger.class, ToStringSerializer.instance)\n                .addSerializer(Long.class, ToStringSerializer.instance)\n                .addSerializer(LocalDateTime.class, new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))\n                .addSerializer(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))\n                .addSerializer(LocalTime.class, new LocalTimeSerializer(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));\n\n        //注册功能模块 例如，可以添加自定义序列化器和反序列化器\n        this.registerModule(simpleModule);\n    }\n}\n\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('112', 'mybatis-plus公共字段自动填充', '1.在字段上定义填充规则\n```\n@TableField(fill = FieldFill.INSERT)//插入时填充\n @TableField(fill = FieldFill.UPDATE)//更新时填充\n @TableField(fill = FieldFill.INSERT_UPDATE)//插入和更新都填充\n```\n2.重写类并实现接口MetaObjectHandler\n```\n@Component\npublic class MyMateObjectHandler implements MetaObjectHandler {\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        metaObject.setValue(\"createTime\", LocalDateTime.now());\n        metaObject.setValue(\"updateTime\",  LocalDateTime.now());\n        metaObject.setValue(\"createUser\", BaseContext.getId());\n        metaObject.setValue(\"updateUser\", BaseContext.getId());\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        metaObject.setValue(\"updateTime\",  LocalDateTime.now());\n        metaObject.setValue(\"updateUser\", BaseContext.getId());\n    }\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('113', 'threadLocal线程历史,同一条线程中的数据可保存在这个域中,方便后续线程需要的时候获取', '1.定义线程的工具类,指定泛型,编写set,get方法\n```\npublic class BaseContext {\n    private static ThreadLocal<Long> threadLocal=new InheritableThreadLocal<>();\n\n    public static void setId(Long id){\n        threadLocal.set(id);\n    }\n\n\n    public static Long getId(){\n        return threadLocal.get();\n    }\n\n\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('114', '对象拷贝', '前者烤后者\n```\nBeanUtils.copyProperties(dish,dishDto);\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('115', '阿里云短信服务AccessKey', '用户名\n```\nJunTian@1844980006848565.onaliyun.com\n```\nAccessKey ID\n```\nLTAI5tML1u8esaPXTkrBBvuz\n```\nAccessKey Secret\n```\nZPXojO3u83DuZYZmm8Ud3hiTtluVTf\n```\n导入maven\n```\n<!-- https://mvnrepository.com/artifact/com.aliyun/aliyun-java-sdk-dysmsapi -->\n<dependency>\n    <groupId>com.aliyun</groupId>\n    <artifactId>aliyun-java-sdk-dysmsapi</artifactId>\n    <version>2.1.0</version>\n</dependency>\n\n<dependency>\n  <groupId>com.aliyun</groupId>\n  <artifactId>aliyun-java-sdk-core</artifactId>\n  <version>4.5.16</version>\n</dependency>\n```\n模板代码\n```\nimport com.aliyuncs.DefaultAcsClient;\nimport com.aliyuncs.IAcsClient;\nimport com.aliyuncs.exceptions.ClientException;\nimport com.aliyuncs.exceptions.ServerException;\nimport com.aliyuncs.profile.DefaultProfile;\nimport com.google.gson.Gson;\nimport java.util.*;\nimport com.aliyuncs.dysmsapi.model.v20170525.*;\n\npublic class SendSms {\n\n    public static void main(String[] args) {\n        DefaultProfile profile = DefaultProfile.getProfile(\"cn-beijing\", \"<your-access-key-id>\", \"<your-access-key-secret>\");\n        /** use STS Token\n        DefaultProfile profile = DefaultProfile.getProfile(\n            \"<your-region-id>\",           // The region ID\n            \"<your-access-key-id>\",       // The AccessKey ID of the RAM account\n            \"<your-access-key-secret>\",   // The AccessKey Secret of the RAM account\n            \"<your-sts-token>\");          // STS Token\n        **/\n        IAcsClient client = new DefaultAcsClient(profile);\n\n        SendSmsRequest request = new SendSmsRequest();\n        request.setPhoneNumbers(\"1368846****\");//接收短信的手机号码\n        request.setSignName(\"阿里云\");//短信签名名称\n        request.setTemplateCode(\"SMS_20933****\");//短信模板CODE\n        request.setTemplateParam(\"张三\");//短信模板变量对应的实际值\n\n        try {\n            SendSmsResponse response = client.getAcsResponse(request);\n            System.out.println(new Gson().toJson(response));\n        } catch (ServerException e) {\n            e.printStackTrace();\n        } catch (ClientException e) {\n            System.out.println(\"ErrCode:\" + e.getErrCode());\n            System.out.println(\"ErrMsg:\" + e.getErrMsg());\n            System.out.println(\"RequestId:\" + e.getRequestId());\n        }\n\n    }\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('116', '短信服务工具类', '```\nimport com.aliyuncs.DefaultAcsClient;\nimport com.aliyuncs.IAcsClient;\nimport com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;\nimport com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;\nimport com.aliyuncs.exceptions.ClientException;\nimport com.aliyuncs.profile.DefaultProfile;\n\n/**\n * 短信发送工具类\n */\npublic class SMSUtils {\n\n	/**\n	 * 发送短信\n	 * @param signName 签名\n	 * @param templateCode 模板\n	 * @param phoneNumbers 手机号\n	 * @param param 参数\n	 */\n	public static void sendMessage(String signName, String templateCode,String phoneNumbers,String param){\n		DefaultProfile profile = DefaultProfile.getProfile(\"cn-hangzhou\", \"\", \"\");\n		IAcsClient client = new DefaultAcsClient(profile);\n\n		SendSmsRequest request = new SendSmsRequest();\n		request.setSysRegionId(\"cn-hangzhou\");\n		request.setPhoneNumbers(phoneNumbers);\n		request.setSignName(signName);\n		request.setTemplateCode(templateCode);\n		request.setTemplateParam(\"{\\\"code\\\":\\\"\"+param+\"\\\"}\");\n		try {\n			SendSmsResponse response = client.getAcsResponse(request);\n			System.out.println(\"短信发送成功\");\n		}catch (ClientException e) {\n			e.printStackTrace();\n		}\n	}\n\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('117', '随机生成验证码工具类', '```\nimport java.util.Random;\n\n/**\n * 随机生成验证码工具类\n */\npublic class ValidateCodeUtils {\n    /**\n     * 随机生成验证码\n     * @param length 长度为4位或者6位\n     * @return\n     */\n    public static Integer generateValidateCode(int length){\n        Integer code =null;\n        if(length == 4){\n            code = new Random().nextInt(9999);//生成随机数，最大为9999\n            if(code < 1000){\n                code = code + 1000;//保证随机数为4位数字\n            }\n        }else if(length == 6){\n            code = new Random().nextInt(999999);//生成随机数，最大为999999\n            if(code < 100000){\n                code = code + 100000;//保证随机数为6位数字\n            }\n        }else{\n            throw new RuntimeException(\"只能生成4位或6位数字验证码\");\n        }\n        return code;\n    }\n\n    /**\n     * 随机生成指定长度字符串验证码\n     * @param length 长度\n     * @return\n     */\n    public static String generateValidateCode4String(int length){\n        Random rdm = new Random();\n        String hash1 = Integer.toHexString(rdm.nextInt());\n        String capstr = hash1.substring(0, length);\n        return capstr;\n    }\n}\n```', 'juntian');
INSERT INTO `tb_brain` VALUES ('118', 'mybatis参数接收/接收参数', '1.直接写在路径上\n```\n@PathVariable\n```\n2.没有写在路径上id=***\n```\n直接使用id这个名字接收即可\n```\n3.post请求\n```\n@requestBody\n可实体类\n也可以map集合\n```\n4.键值对直接用实体接收即可,json才需要用@requestBody接收', 'juntian');
INSERT INTO `tb_brain` VALUES ('119', 'id生成器,mybatis-plus', '工具类:IdWorker', 'juntian');
INSERT INTO `tb_brain` VALUES ('120', 'git操作集合', '设置用户信息\n```\ngit config --global user.name \"itcast\"\ngit config --global user.email \"hello@itcast.cn\"\n```\n\n查看配置信息\n```\ngit config--list\n```\ngit仓库初始化\n```\ngit init\n```\n本地仓库常用命令\n```\ngit status         查看文件状态\ngit add            将文件的修改加入暂存区\ngit reset          将暂存区的文件取消暂存或者是切换到指定版本\ngit commit         将暂存区的文件修改提交到版本库\ngit log            查看日志\n```\n远程仓库操作\n```\ngit remote                查看远程仓库   -v\ngit remote add            添加远程仓库\ngit clone                 从远程仓库克隆\ngit pull                  从远程仓库拉取\ngit push                  推送到远程仓库\n```\n将本地仓库内容推送到远程仓库\n```\ngit push [remote-name] [branch-name]\ngit push origin main \n```\n从远程仓库获取最新版本并合并到本地仓库\n```\ngit pull [short-name] [branch-name]\n注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文.件的时候会报错(fatal: refusing to merge unrelated histories )解决此问题可以在git pull命令后加入参数--allow-unrelated-histories\n```\n分支命令\n```\ngit branch                          查看分支\ngit branch [name]                   创建分支\ngit checkout [name]                 切换分支\ngit push [shortName] [name]         推送至远程仓库分支\ngit merge [name]                    合并分支\n```\n合并分支\n```\n当两个分支同时拥有同一个文件,并且都对其进行了修改的情况下,合并两个分支就会出现冲突,不知道保留那个分支中文件的数据,默认会自动重复保留文件中的信息,手动修改后,提交会报错.\n解决方法:\n1.手动修改后\n2.在commit提交的最后加上-i \n```\n\n\n\n', 'juntian');
INSERT INTO `tb_brain` VALUES ('121', '123', '123', 'admin');
